
// step 1: find max depth
const s
function countMaxDepth(s: string): number {
    const brancketObj: any = { "<": 1,">": -1}
    let count=0;
    let max=0;
    if (brancketObj[s.charAt(0)] < 0) {
        return 0
    }
    let stack = []
    for (const val of s) {

        const currentBracketValue: number = brancketObj[val]
        if (currentBracketValue < 0) {
            const previousBracketValue = brancketObj[stack[stack.length - 1]]
            const addition = currentBracketValue + previousBracketValue
            if (addition == 0) {
                stack.pop()
                count--;
                if(count>max){
                    max=count
                }
            } else {
                stack.push(val)
                count++;
                if(count>max){
                    max=count
                }
            }

        } else {
            stack.push(val)
            count++;
            if(count>max){
                max=count
            }
        }
    }

    return max/2;

};
console.log(countMaxDepth(s))

